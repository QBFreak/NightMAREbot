@@ NightMAREbot common command handler v1.0
@@ - 

@@ ---+++ TODO:
@@    * check for players on channels
@@    * limit list manager object (u/vlocked to [gteq(rank(v(0)),4)]


@defattr Common command handler/bot_cmd
@defattr Common command handler/bot_cmd_params
@defattr Common command handler/misc_cmd_params
@defattr Common command handler/lasttazered=function

@defattr Common command handler/inccount
@defattr Common command handler/deccount
@defattr Common command handler/setcount
@defattr Common command handler/limits=function
@defattr Common command handler/getlimit=function
@defattr Common command handler/islimited=function
@defattr Common command handler/getcount=function
@defattr Common command handler/limitstatus=function
@defattr Common command handler/limitlist=function
@defattr Common command handler/getname=function

@defattr Common command handler/learn
@defattr Common command handler/infobot=function

@defattr Common command handler/agediff=function
@defattr Common command handler/condiff=function
@defattr Common command handler/dbref=function
@defattr Common command handler/wedit=function

@set Common command handler=getlimit:[extract(extract(limits(),wmatch(limits(),strcat(v(0),~*)),1),2,1,~)]
@set Common command handler=islimited:[truth(wmatch(limits(),strcat(v(0),~*)))]
@set Common command handler=getcount:[extract(extract(limits(),wmatch(limits(),strcat(v(0),~*)),1),3,1,~)]
@set Common command handler=limitstatus:[ifelse(islimited(v(0)),iftrue(eq(getcount(v(0)),getlimit(v(0))),ifelse(gt(getcount(v(0)),getlimit(v(0))),2,0)),0)]
@set Common command handler=limitlist:[foreach(limits(),[first(v(0),~)])]

@@ getname(<text>) will attempt to look up the name of the player that matches <text>. If it fails it will return <text>.
@@  If ComCName is installed, player names will be prefixed with a * so that the com commands will process them into cnames
@@  this can be overridden by calling getname(<text>,<nocomcname>) if <nocomcname> is 1
@set Common command handler=getname:[setq(1,not(v(1)))][ifelse(match(pnum(v(0)),#-1),v(0),ifelse(land(eq(comcname_installed(),1),v(1)),strcat(*,name(pnum(v(0)))),name(pnum(v(0)))))]

@set Common command handler=dbref:[switch(v(1),the MARE,#0,init,pnum(v(0)),ifelse(isdbref(v(1)),v(1),pnum(v(1))))]
@set Common command handler=agediff:[setq(1,wedit(v(1),me,init))][setq(2,wedit(v(2),me,init))][setq(9,v(0))][setq(3,ifelse(strlen(v(0)),ifelse(strlen(v(1)),ifelse(strlen(v(2)),s([v(1)]~[v(2)]),switch(v(1),MARE,s(the MARE~[v(0)]),s([v(1)]~the MARE))),s([v(0)]~the MARE)),#-1))][setq(4,edit(foreach(v(3),[dbref(v(9),v(0))],~),~,spc(1)))][setq(5,foreach(v(4),[createtime(v(0))]))][setq(6,sort(v(5)))][setq(7,ifelse(match(v(5),v(6)),v(4),wordflip(v(4))))][setq(6,insert(v(6),3,sub(last(v(6)),first(v(6)))))][setq(8,foreach(v(7),[ifelse(match(v(0),#3),the MARE,name(v(0)))],,~))] [first(v(8),~)] is [tma(last(v(6)))] older than [last(v(8),~)]
@set Common command handler=condiff:[setq(1,wedit(v(1),me,init))][setq(2,wedit(v(2),me,init))][setq(9,v(0))][setq(3,ifelse(strlen(v(0)),ifelse(strlen(v(1)),ifelse(strlen(v(2)),s([v(1)]~[v(2)]),switch(v(1),MARE,s(the MARE~[v(0)]),s([v(1)]~the MARE))),s([v(0)]~the MARE)),#-1))][setq(4,edit(foreach(v(3),[dbref(v(9),v(0))],~),~,spc(1)))][setq(5,foreach(v(4),[age(v(0))]))][setq(6,sort(v(5)))][setq(7,ifelse(match(v(5),v(6)),v(4),wordflip(v(4))))][setq(6,insert(v(6),3,sub(last(v(6)),first(v(6)))))][setq(8,foreach(v(7),[ifelse(match(v(0),#3),the MARE,name(v(0)))],,~))] [first(v(8),~)] has been connected [tma(last(v(6)))] longer than [last(v(8),~)]
@@%r%t0: [v(0)]%r%t1: [v(1)]%r%t2: [v(2)]%r%t3: [v(3)]%r%t4: [v(4)]%r%t5: [v(5)]%r%t6: [v(6)]%r%t7: [v(7)]%r%t8: [v(8)]%r%t9: [v(9)]
@set Common command handler=wedit:[ifelse(wmatch(v(0),v(1)),insert(remove(v(0),wmatch(v(0),v(1)),1),wmatch(v(0),v(1)),v(2)),v(0))]

@set Common command handler=Color:[get(*nmb,color)]
@set Common command handler=Desc:This handles most of NightMAREbot's common commands. Most anything on a channel 'nmb or with a first word starting with ! will be handled here.

@@     vv-- DEBUG line for handy copying --vv;
@@echo 0: '[v(0)]'  1: '[v(1)]'  2: '[v(2)]'  3: '[v(3)]'  4: '[v(4)]'  5: '[v(5)]'  6: '[v(6)]'  7: '[v(7)]'  8: '[v(8)]'  9: '[v(9)]';

@@ Handles commands with parameters: channel name !command param;
#mupdate on
@set Common command handler=bot_cmd_params:$bot_cmd * * * *:
    @echo [ansi(+y,bot_cmd_params)]  [ansi(+g,Channel:)] [ansi(c,v(0))]  [ansi(+g,Name:)] [ansi(c,v(1))]  [ansi(+g,Command:)] [ansi(c,v(2))]  [ansi(+g,Params:)] [ansi(c,v(3))];

	@switch [limitstatus(v(2)]=1,{
		send_chan [v(0)] sorry, I disabled [v(2)] for a while.;
	},2,{
		send_page [v(1)] Sorry, I'm too tired to do that right now! The more you try, the longer it'll take me to get my strength back!;
	},{
		@switch [v(2)]=order,{
			@switch [gt(wmatch(v(3),for),1)]=0,{
				send_chan [v(0)] :delivers [if(not(match(first(v(3))),a),{a })][v(3)] to [v(1)]
			},{
				send_chan [v(0)] :delivers [if(not(match(first(v(3)),a)),{a })][setq(4,edit(v(3),for,to))][setq(5,extract(v(4),inc(wmatch(v(4),to)),1))][ifelse(isdbref(pnum(strcat(*,v(5)))),edit(v(4),v(5),name(strcat(*,v(5)))),v(4))]
			};
		},tazer,{
			@switch [match(iftrue(name(strcat(*,v(3))),v(3)),v(lasttazered))]=1,{
				send_chan [v(0)] twice in a row? that's not nice.;
			},{
				send_chan [v(0)] :whips out his Omni Tazer Supreme(tm) and gives [iftrue(name(strcat(*,v(3))),v(3))] a good zap;
				@switch [match(name(strcat(*,v(3))),NightMAREbot)]=1,{
					@wait 1={send_chan [v(0)] Hey, waait a minute...};
					@switch [rand(4)]=0,{
						@wait 3={send_chan [v(0)] :whips out his Omni Tazer Supreme(tm) and gives [iftrue(name(strcat(*,v(1))),v(1))] a good zap};
					};
				};
				@lasttazered me=[iftrue(name(strcat(*,v(3))),v(3))];
			};
		},age,{
			@switch gt(wcount(v(3)),2)=1,{
				send_chan [v(0)] Ack, too many player! Try no more than two at once :);
			},{
				@switch [wcount(foreach(v(3),[if(not(lor(lor(isdbref(v(0)),pnum(v(0))),switch(v(0),me,1,0))),v(0))]))]=0,{
					@switch [wcount(v(3))]=1,{
						@switch [lor(match(v(3),me),match(name(pnum(v(3))),v(1)))]=1,{
							send_chan [v(0)] You are [tma(sub(xtime(),createtime(pnum(v(1)))))] old;
						},{
							send_chan [v(0)] [name(pnum(v(3)))] is [tma(sub(xtime(),createtime(pnum(v(3)))))] old;
						};
					},{
						send_chan [v(0)] [agediff(v(1),first(v(3)),last(v(3)))];
					};
				},{
					send_chan [v(0)] I can't find an age for: [foreach(v(3),[if(not(lor(isdbref(v(0)),pnum(v(0)))),v(0))])];
				}
			}
		},connected,{
			@switch gt(wcount(v(3)),2)=1,{
				send_chan [v(0)] Ack, too many player! Try no more than two at once :);
			},{
				@switch [wcount(foreach(v(3),[if(not(lor(pnum(v(0)),switch(v(0),me,1,0))),v(0))]))]=0,{
					@switch [wcount(v(3))]=1,{
						@switch [lor(match(v(3),me),match(name(pnum(v(3))),v(1)))]=1,{
							send_chan [v(0)] You have been connected for [tma(age(pnum(v(1))))];
						},{
							send_chan [v(0)] [name(pnum(v(3)))] has been connected for [tma(age(pnum(v(3))))];
						};
					},{
						send_chan [v(0)] [condiff(v(1),first(v(3)),last(v(3)))];
					};
				},{
					send_chan [v(0)] I can't find: [foreach(v(3),[if(not(pnum(v(0))),v(0))])];
				}
			}
		},alias,{
			@switch [wcount(v(3))]=1,{
				@switch [lor(match(v(3),me),match(name(pnum(v(3))),v(1)))]=1,{
					@switch [strlen(get(pnum(v(1)),alias))]=0,{
						send_chan [v(0)] Sorry, I couldn't retrieve your alias. Maybe you should try @alias me=[mid(v(1),0,3)];
					},{
						send_chan [v(0)] Your alias is [get(pnum(v(1)),alias)];
					};
				},{
					@switch [match(pnum(v(3)),#-1)]=1,{
						send_chan [v(0)] Sorry, I couldn't find the player '[v(3)]';
					},{
						@switch [gt(strlen(get(pnum(v(3)),alias)),0)]=0,{
							send_chan [v(0)] Sorry, [v(3)] doesn't appear to have an alias set;
						},{
							@switch [match(get(pnum(v(3)),alias),#-1)]=1,{
								send_chan [v(0)] Sorry, I was unable to retrieve the alias for [v(3)];
							},{
								send_chan [v(0)] [name(pnum(v(3)))]'s alias is [get(pnum(v(3)),alias)];
							};
						};
					};
				};
			},{
				send_chan [v(0)] Woah, easy there. One alias at a time.;
			};
		},help,{
			@switch v(3)=
				ping,{
					send_chan [v(0)] ping: checks to see if I'm paying attention or not, I'll respond with 'pong';
				},order,{
					send_chan [v(0)] order <thing> [<for player>]: I deliver an imaginary <thing> to you, or optionally to <player> if you specify one;
				},tazer,{
					send_chan [v(0)] tazer [<player>]: I test my Omni Tazer Supreme(tm) on <player>, or yourself if no <player> is given;
				},age,{
					send_chan [v(0)] age <player1> [<player2>]: I'll compare <player1>'s age to <Player2>'s age, or simplay display it if <Player2> is not given;
				},connected,{
					send_chan [v(0)] connected <player1> [<player2>]: I'll compare <player1>'s total connected time (for all sessions) to <Player2>'s, or simplay display it if <Player2> is not given;
				},help,{
					send_chan [v(0)] help [<topic>]: I have help for the following topics: ping, order, tazer, age, connected, help;
				},,{
					send_chan [v(0)] help [<topic>]: I have help for the following topics: ping, order, tazer, age, connected, help;
					send_chan [v(0)] I also have the following commands (but no help for them): alias, cat, doom, dork, ferret, grade, kill, knockknock, loser, marco, mirror, mischan, pants, poing, qb, tape, thunder;
				}
		},mirror,{
			send_chan [v(0)] [flip(v(3))];
		},kill,{
			@switch [wmatch(v(3),wizard)]=1,{
				send_chan [v(0)] that won't be tolerated. Goodbye.;
				@wait 2=@boot [pnum(v(1))]=trying to kill Wizard.;
			},{
				send_chan [v(0)] thats not nice at all!;
				@switch [rand(4)]=1,{
					@wait 3=send_chan [v(0)] :stabs [v(1)] in the back;
				};
			};
		},mischan,{
			@switch [match(pnum(v(3)),#-1)]=1,{
				send_chan [v(0)] :eats the mischan, mmm tasty!;
			},{
				send_chan [v(0)] [s(randword({bad [name(pnum(v(3)))], no mischan!}~:shoves [name(pnum(v(3)))] back onto the right channel,~))];
			};
		},dork,{
			send_chan [v(0)] :stamps DORK on [getname(v(3))] 's forehead with a giant rubber stamp;
		},cat,{
			send_chan [v(0)] :stamps CAT on [getname(v(3))] 's forehead with a giant rubber stamp;
		},poing,{
			send_chan [v(0)] :poings across the MARE, narrowly missing [getname(v(3))] !;
		},thunder,{
			send_chan [v(0)] :emits an ominous MOOOO!;
		},grade,{
			send_chan [v(0)] :gives [getname(v(3))] a[switch(setr(4,randword(A B C D F)),A,n,F,n)] [v(4)][if(match(v(4),A),{, gold star!})];
		},ferret,{
			send_chan [v(0)] :stamps FERRET on [getname(v(3))] 's forehead with a giant rubber stamp;
		},doom,{
			send_chan [v(0)] :stamps DOOMED on [getname(v(3))] 's forehead with a giant rubber stamp;
		},pants,{
			send_chan [v(0)] :gets out the duct tape and commences operation "Make [getname(v(3))] AWESOME pants";
		},knockknock,{
			send_chan [v(0)] [getname(v(3))] Knock Knock!
		},whos,{
			@switch wmatch(there there?,v(3))=0,,{
				send_chan [v(0)] '[v(1)] don't ask stupid questions, just get the door;
			}
		},who's,{
			@switch wmatch(there there?,v(3))=0,,{
				send_chan [v(0)] '[v(1)] don't ask stupid questions, just get the door;
			}
		},tape,{
			@switch land(setr(4,wmatch(v(3),to)),not(lor(eq(v(4),1),eq(v(4),wcount(v(3))))))=0,{
				send_chan [v(0)] :whips out the duct tape and sticks [getname(v(3))] to [randword(setunion(the wall~the ceiling~the floor~the couch,strcat(Sair's pants~,if(eq(rand(4),0),foreach(lwho(),[name(v(0))],,~))),~),~)];
			},{
				send_chan [v(0)] :whips out the duct tape and sticks [mid(regmatch(v(3),* to *,4),0,0)][getname(v(4))] to [getname(v(5))];
			};
		},loser,{
			send_chan [v(0)] '[v(0)] we don't believe in labels around here.;
			@wait 3={send_chan [v(0)] :stamps DORK on [getname(v(3))] 's forehead with a giant rubber stamp;};
		},qb,{
			@switch [lt(mod(idle(*qb),60),10)]=1,{
				send_chan [v(0)] Why don't you ask him yourself.;
			},{
				send_chan [v(0)] You want him to do what now?;
			};
		},goodnight,{
			@switch [match(getname(v(3),0),name(*nmb))]=1,{
				@wait 3=send_chan [v(0)] [trim(randword({goodnight~later~sleep well},~))] [getname(v(3))];
			},{
				@wait 1=send_chan [v(0)] [if(isdbref(pnum(v(3))),')][getname(v(3))] [trim(randword({goodnight~later~sleep well},~))];
			};
		},cheese,{
			send_chan [v(0)] :pelts [getname(v(3))] with cheese!;
		},tissue,{
			send_chan [v(0)] *THOOM* [cname(*nmb)] fires the tissue cannon, hurling a box of tissues at [getname(v(3))];
		},{
			@tr me/misc_cmd_params=[v(0)] [v(1)] [v(2)] [v(3)];
		};
	};
	@tr me/inccount=[v(2)];
.

@set Common command handler=bot_cmd:$bot_cmd * * *:
	@@ Handles command without parameters: channel name !command;
	
	@@ Only handle commands with no parameters. @bot_cmd_params handles commands with parameters.;
	@switch wcount(v(2))=1,{
	    @echo [ansi(+y,bot_cmd)]  [ansi(+g,Channel:)] [ansi(c,v(0))]  [ansi(+g,Name:)] [ansi(c,v(1))]  [ansi(+g,Command:)] [ansi(c,v(2))];

		@switch [limitstatus(v(2))]=1,{
			@echo bot_cmd: Command [v(2)] limited, public warning;
			send_chan [v(0)] sorry, I disabled [v(2)] for a while.;
		},2,{
			@echo bot_cmd: Command [v(2)] limited, private warning;
			send_page [v(1)] Sorry, I'm too tired to do that right now! The more you try, the longer it'll take me to get my strength back!;
		},{
			@switch [v(2)]=
				ping,{
					@@ Base handler;
					send_chan [v(0)] '[v(1)] pong;
				},marco,{
					@@ Base handler;
					send_chan [v(0)] polo!;
				},order,{
					@@ Base handler;
					send_chan [v(0)] :delivers nothing to [v(1)];
				},tazer,{
					@@ Base handler;
					send_chan [v(0)] :whips out his Omni Tazer Supreme(tm) and gives [v(1)] a good zap;
					@lasttazered me=[v(1)];
				},age,{
					@@ Base handler;
					send_chan [v(0)] I am [tma(sub(xtime(),createtime(*nmb)))] old, and I've been connected for a total of [tma(age(*nmb))].
				},connected,{
					@@ Base handler;
					send_chan [v(0)] I am [tma(sub(xtime(),createtime(*nmb)))] old, and I've been connected for a total of [tma(age(*nmb))].
				},alias,{
					@@ Base handler;
						send_chan [v(0)] My alias is [get(*nmb,alias)];
						@wait 1={
							@switch [strlen(get(pnum(v(1)),alias))]=0,{
								send_chan [v(0)] Sorry, I couldn't retrieve your alias. Maybe you should try @alias me=[mid(v(1),0,3)];
							},{
								send_chan [v(0)] Your alias is [get(pnum(v(1)),alias)];
							};
						};
				},help,{
					send_chan [v(0)] help [<topic>]: I have help for the following topics: ping, order, tazer, age, connected, help;
					send_chan [v(0)] I also have the following commands (but no help for them): alias, cat, doom, dork, ferret, grade, kill, knockknock, loser, marco, mirror, mischan, pants, poing, qb, tape, thunder;
				},mirror,{
					@@ Random handler;
					send_chan [v(0)] [flip(iftrue(name(strcat(*,v(3))),v(3)))];
				},kill,{
					@@ Random handler;
					send_chan [v(0)] thats not nice at all!;
					@switch [rand(4)]=1,{
						@wait 3=send_chan [v(0)] :stabs [v(1)] in the back;
					};
				},mischan,{
					@@ Random handler;
					send_chan [v(0)] :eats the mischan, mmm tasty!;
				},dork,{
					@@ Random handler;
					send_chan [v(0)] :stamps DORK on [v(1)]'s forehead with a giant rubber stamp;
				},cat,{
					@@ Random handler;
					send_chan [v(0)] :stamps CAT on [v(1)]'s forehead with a giant rubber stamp;
				},poing,{
					@@ Random handler;
					send_chan [v(0)] :poings across the MARE, narrowly missing [v(1)]!;
				},thunder,{
					@@ Random handler;
					send_chan [v(0)] :emits an ominous MOOOO!;
				},grade,{
					@@ Random handler;
					send_chan [v(0)] :gives [v(1)] a[switch(setr(4,randword(A B C D F)),A,n,F,n)] [v(4)];
				},ferret,{
					@@ Random handler;
					send_chan [v(0)] :stamps FERRET on [v(1)]'s forehead with a giant rubber stamp;
				},doom,{
					@@ Random handler;
					send_chan [v(0)] :stamps DOOMED on [v(1)]'s forehead with a giant rubber stamp;
				},pants,{
					@@ Random handler;
					send_chan [v(0)] :gets out the duct tape and commences operation "Make [v(1)] new pants";
				},knockknock,{
					@@ Random handler;
					send_chan [v(0)] '[v(1)] who's there?;
				},tape,{
					@@ Random handler;
					send_chan [v(0)] :whips out the duct tape and sticks [v(1)] to [randword(setunion(the wall~the ceiling~the floor~the couch,strcat(Sair's pants~,if(eq(rand(4),0),foreach(lwho(),[name(v(0))],,~))),~),~)];
				},loser,{
					@@ Random handler;
					@switch [rand(2)]=0,{
						@cemit [v(0)]=[cname(*nmb)][ansi(strcat(get(*nmb,color),+),{'s eyes well up, "Look, you don't have to rub it in OK?"})];
					},{
						send_chan [v(0)] We know you are, but we try not to talk about it.;
					};
				},qb,{
					@@ Random handler;
					send_chan [v(0)] :pushes a button on [name(*qb)];
					@wait 2=dotherobot [v(0)];
				},goodnight,{
					@@ Base handler;
					@wait 1=send_chan [v(0)] '[v(1)] [trim(randword({
						goodnight~
						later~
						sleep well
					},~))];
				},cheese,{
					@@ Random handler;
					send_chan [v(0)] :pelts [v(1)] with cheese!;
				},tissue,{
					@@ Random handler;
					send_chan [v(0)] *THOOM* [name(*nmb)] fires the tissue cannon, hurling a box of tissues at [v(1)];
				},{
					@echo bot_cmd UNHANDLED COMMAND [v(2)];
				};
		};
		@tr me/inccount=[v(2)];
	};
.

@set Common command handler=misc_cmd_params:
	@@ Words: 0: channel 1: from 2+: message
	@echo 0: [v(0)];
	@echo Invalid command, check for other misc. stuff;
	@switch [right(v(0),1)]=\\\?,{
		@echo Answering a question;
		@wait 1=send_chan [first(v(0))] [randword({
			if I told you, I'd have to kill you~
			why back in my day, we didn't have such newfangled madness. We walked to the MARE barefoot in the snow. Uphill. Both ways!~
			go try Google, it knows all~
			if I could answer that, I could make millions~
			don't you have better things to do than ask me silly questions?~
			do armadillo eat pizza?~
			for every useless question, there is a useless answer
		},~)];
	},{
		@switch extract(v(0),3,wcount(v(0)))=
			you broke it!,{
				send_chan [v(0)] I did not!
			},you broke it,{
				send_chan [v(0)] I did not!
			},{
				@echo Nope, all done.;
			};
	};
.

@set Common command handler=inccount:
    @switch [islimited(v(0))]=1,{
        @echo [v(0)] status: [limitstatus(v(0))]  count: [getcount(v(0))]  limit: [getlimit(v(0))];
        @echo inc'ing [v(0)] count to [inc(getcount(v(0)))];
        @Set me=limits:[remove(limits(),wmatch(limits(),strcat(v(0),~*)),1)] [v(0)]~[getlimit(v(0))]~[inc(getcount(v(0)))];
    };
.

@set Common command handler=deccount:
    @switch [land(islimited(v(0)),gt(getcount(v(0)),0))]=1,{
        @echo dec'ing [v(0)] count to [ifelse(eq(getcount(v(0)),0),0,dec(getcount(v(0))))];
        @limits me=[remove(limits(),wmatch(limits(),strcat(v(0),~*)),1)] [v(0)]~[getlimit(v(0))]~[dec(getcount(v(0)))];
    }
.

@set Common command handler=setcount:
    @switch [land(islimited(v(0)),isnum(v(1)))]=1,{
        @echo dec'ing [v(0)] count to [ifelse(eq(getcount(v(0)),0),0,dec(getcount(v(0))))];
        @limits me=[remove(limits(),wmatch(limits(),strcat(v(0),~*)),1)] [v(0)]~[getlimit(v(0))]~[v(1)];
    }
.

@set Common command handler=learn:
    @echo Learning that '[v(1)]' is '[v(2)]';
    @switch wmatch(lattrdef(me),strcat(infobot_,v(1)))=0,{
        &infobot_[v(1)] me=[v(2)];
        send_chan [v(0)] OK;
    },{
        send_chan [v(0)] But '[v(1)]' is already '[infobot(v(2))]';
    };
.

@set Common command handler=Atime:
    @foreach limitlist()={
        @tr me/deccount=\[v(0)];
    }
.
#mupdate off

@set Common command handler=infobot:[if(wmatch(lattrdef(me),setr(1,strcat(infobot_,v(0)))),v(v(1)))]
